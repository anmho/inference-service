// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/v1/inference_service.proto

package inferencev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/anmho/inference/gen/protos/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InferenceServiceName is the fully-qualified name of the InferenceService service.
	InferenceServiceName = "api.v1.InferenceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InferenceServiceGetCompletionsProcedure is the fully-qualified name of the InferenceService's
	// GetCompletions RPC.
	InferenceServiceGetCompletionsProcedure = "/api.v1.InferenceService/GetCompletions"
	// InferenceServiceStreamCompletionsProcedure is the fully-qualified name of the InferenceService's
	// StreamCompletions RPC.
	InferenceServiceStreamCompletionsProcedure = "/api.v1.InferenceService/StreamCompletions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	inferenceServiceServiceDescriptor                 = v1.File_protos_v1_inference_service_proto.Services().ByName("InferenceService")
	inferenceServiceGetCompletionsMethodDescriptor    = inferenceServiceServiceDescriptor.Methods().ByName("GetCompletions")
	inferenceServiceStreamCompletionsMethodDescriptor = inferenceServiceServiceDescriptor.Methods().ByName("StreamCompletions")
)

// InferenceServiceClient is a client for the api.v1.InferenceService service.
type InferenceServiceClient interface {
	GetCompletions(context.Context, *connect.Request[v1.CompletionsRequest]) (*connect.Response[v1.GetCompletionsResponse], error)
	StreamCompletions(context.Context, *connect.Request[v1.CompletionsRequest]) (*connect.ServerStreamForClient[v1.StreamCompletionsResponse], error)
}

// NewInferenceServiceClient constructs a client for the api.v1.InferenceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInferenceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InferenceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inferenceServiceClient{
		getCompletions: connect.NewClient[v1.CompletionsRequest, v1.GetCompletionsResponse](
			httpClient,
			baseURL+InferenceServiceGetCompletionsProcedure,
			connect.WithSchema(inferenceServiceGetCompletionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamCompletions: connect.NewClient[v1.CompletionsRequest, v1.StreamCompletionsResponse](
			httpClient,
			baseURL+InferenceServiceStreamCompletionsProcedure,
			connect.WithSchema(inferenceServiceStreamCompletionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// inferenceServiceClient implements InferenceServiceClient.
type inferenceServiceClient struct {
	getCompletions    *connect.Client[v1.CompletionsRequest, v1.GetCompletionsResponse]
	streamCompletions *connect.Client[v1.CompletionsRequest, v1.StreamCompletionsResponse]
}

// GetCompletions calls api.v1.InferenceService.GetCompletions.
func (c *inferenceServiceClient) GetCompletions(ctx context.Context, req *connect.Request[v1.CompletionsRequest]) (*connect.Response[v1.GetCompletionsResponse], error) {
	return c.getCompletions.CallUnary(ctx, req)
}

// StreamCompletions calls api.v1.InferenceService.StreamCompletions.
func (c *inferenceServiceClient) StreamCompletions(ctx context.Context, req *connect.Request[v1.CompletionsRequest]) (*connect.ServerStreamForClient[v1.StreamCompletionsResponse], error) {
	return c.streamCompletions.CallServerStream(ctx, req)
}

// InferenceServiceHandler is an implementation of the api.v1.InferenceService service.
type InferenceServiceHandler interface {
	GetCompletions(context.Context, *connect.Request[v1.CompletionsRequest]) (*connect.Response[v1.GetCompletionsResponse], error)
	StreamCompletions(context.Context, *connect.Request[v1.CompletionsRequest], *connect.ServerStream[v1.StreamCompletionsResponse]) error
}

// NewInferenceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInferenceServiceHandler(svc InferenceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inferenceServiceGetCompletionsHandler := connect.NewUnaryHandler(
		InferenceServiceGetCompletionsProcedure,
		svc.GetCompletions,
		connect.WithSchema(inferenceServiceGetCompletionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inferenceServiceStreamCompletionsHandler := connect.NewServerStreamHandler(
		InferenceServiceStreamCompletionsProcedure,
		svc.StreamCompletions,
		connect.WithSchema(inferenceServiceStreamCompletionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.InferenceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InferenceServiceGetCompletionsProcedure:
			inferenceServiceGetCompletionsHandler.ServeHTTP(w, r)
		case InferenceServiceStreamCompletionsProcedure:
			inferenceServiceStreamCompletionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInferenceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInferenceServiceHandler struct{}

func (UnimplementedInferenceServiceHandler) GetCompletions(context.Context, *connect.Request[v1.CompletionsRequest]) (*connect.Response[v1.GetCompletionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.InferenceService.GetCompletions is not implemented"))
}

func (UnimplementedInferenceServiceHandler) StreamCompletions(context.Context, *connect.Request[v1.CompletionsRequest], *connect.ServerStream[v1.StreamCompletionsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.InferenceService.StreamCompletions is not implemented"))
}
